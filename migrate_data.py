import sqlite3
import pandas as pd
from sqlalchemy import create_engine

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
# 1. –ò–º—è –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ SQLite. –°—É–¥—è –ø–æ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–∞–∫–∏–º.
SQLITE_DB_PATH = 'scrims_data.db'

# 2. –í—Å—Ç–∞–≤—å—Ç–µ –°–Æ–î–ê –≤–∞—à—É —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ Neon/Postgres, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ —Ä–∞–Ω–µ–µ.
POSTGRES_URL = 'postgresql://neondb_owner:npg_CoZH7MEs8Rfm@ep-lucky-thunder-afxzcl54-pooler.c-2.us-west-2.aws.neon.tech/neondb?sslmode=require' # <--- –í–ê–ñ–ù–û

# 3. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ database.py –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞.
TABLES_TO_MIGRATE = [
    'scrims',
    'tournament_games',
    'soloq_games',
    'manual_drafts',
    'schedule_entries',
    'schedule_notes',
    'jungle_pathing',
    'player_positions_snapshots',
    'first_wards_data',
    #'all_wards_data',
    #'player_positions_timeline'
]
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ô–ö–ò ---

print("–ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")

try:
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Postgres (Neon)
    postgres_engine = create_engine(POSTGRES_URL)
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Postgres (Neon).")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É SQLite
    sqlite_conn = sqlite3.connect(SQLITE_DB_PATH)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ SQLite —Ñ–∞–π–ª—É: {SQLITE_DB_PATH}.")

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    for table_name in TABLES_TO_MIGRATE:
        print(f"\n–ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–∞–±–ª–∏—Ü—É '{table_name}'...")
        try:
            # –ß–∏—Ç–∞–µ–º –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –∏–∑ SQLite –≤ DataFrame
            df = pd.read_sql_query(f'SELECT * FROM "{table_name}"', sqlite_conn)
            print(f"  - –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ SQLite.")

            # –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö –≤ Postgres
            if not df.empty:
                # 'replace' - –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ
                df.to_sql(table_name, postgres_engine, if_exists='replace', index=False)
                print(f"  - ‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ Postgres.")
            else:
                print(f"  - ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å.")

        except Exception as e:
            print(f"  - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {e}")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite
    sqlite_conn.close()
    print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

except Exception as e:
    print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")